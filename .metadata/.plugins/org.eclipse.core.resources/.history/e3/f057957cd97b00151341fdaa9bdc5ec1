public class Board {
	
	private char[][] layout;
	
	
	public Board(int n, int m, String[] rows) {
		
		this.layout = new char[n][m];
		
		for(int i=0; i<n; i++) {
			String line = rows[i];
			
			for(int j=0; j<line.length(); j++)
			{
				char c = line.charAt(i);
				layout[i][j] = c;
			}
		}
	}
	
	public Board(char[][] layout) {
		
		char[][] copy = new char[layout.length];
		for(int i=0; i< layout.length; i++) {
			
		}
	}
	
	public void moveRow(int rowNumber, int positions, Direction direction) {
		
		String row = String.valueOf(layout[rowNumber]);
		
		switch(direction){
		case LEFT:
			layout[rowNumber] = moveLeft(row, positions);
			break;
		case RIGHT:
			layout[rowNumber] = moveRight(row, positions);
		default:
			break;
		}
	}
	
	public void moveColumn(int columnNumber, int positions, Direction direction){
		
		StringBuilder originalRow = new StringBuilder();
		char[] modified = new char[layout.length];
		
		for(int i=0; i<layout.length; i++) {
			originalRow.append(layout[i][columnNumber]);
		}
		
		switch(direction) {
		case UP:
			modified = moveLeft(originalRow.toString(), positions);
			break;
		case DOWN:
			modified = moveRight(originalRow.toString(), positions);
			break;
		default:
			break;
		}
		
		for(int i=0; i<layout.length; i++) {
			layout[i][columnNumber] = modified[i];
		}
	}
	
	private char[] moveLeft(String original, int positions) {

		StringBuilder sb = new StringBuilder();
		sb.append(original.substring(original.length() - positions, original.length()));
		sb.append(original.substring(0, original.length() - positions));
		
		return sb.toString().toCharArray();
	}
	
	private char[] moveRight(String original, int positions) {
		StringBuilder sb = new StringBuilder();
		
		sb.append(original.substring(original.length() - positions, original.length()));
		sb.append(original.substring(0, positions));
		
		return sb.toString().toCharArray();		
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		
		for(int i=0; i < layout.length; i++) {
			for(int j=0; j< layout[i].length; i++) {
				sb.append(layout[i][j]);
			}
		}	
		return sb.toString();
	}

}
